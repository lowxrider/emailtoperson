# pages/page_email_generator.py

import streamlit as st
from openai import OpenAI
from utils.db import fetch_customers, fetch_prompts
from config import DEFAULT_MODEL, DEFAULT_TEMPERATURE, DEFAULT_TOP_P, DEFAULT_MAX_TOKENS

def main():
    st.title("‚úâÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Email-—Ä–∞—Å—Å—ã–ª–æ–∫")

    api_key = st.session_state.get("openai_api_key", "").strip()
    if not api_key:
        st.warning("–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
        return
    client = OpenAI(api_key=api_key)

    model = st.session_state.get("model", DEFAULT_MODEL)
    temperature = st.session_state.get("temperature", DEFAULT_TEMPERATURE)
    top_p = st.session_state.get("top_p", DEFAULT_TOP_P)
    max_tokens = st.session_state.get("max_tokens", DEFAULT_MAX_TOKENS)

    # –ö–ª–∏–µ–Ω—Ç—ã
    clients_df = fetch_customers()
    if clients_df.empty:
        st.info("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    client_options = {
        f"{row['first_name']} {row['last_name']} (ID {row['id']})": row['id']
        for idx, row in clients_df.iterrows()
    }
    selected = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", list(client_options.keys()))
    selected_ids = [client_options[k] for k in selected]

    # –ü—Ä–æ–º–ø—Ç—ã
    prompts_df = fetch_prompts()
    if prompts_df.empty:
        st.info("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
        return
    prompt_map = {row['description']: row['prompt'] for idx, row in prompts_df.iterrows()}
    prompt_desc = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (–ø—Ä–æ–º–ø—Ç)", list(prompt_map.keys()))
    template = prompt_map[prompt_desc]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º
    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–∞"):
        if not selected_ids:
            st.error("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        else:
            results = []
            for cid in selected_ids:
                client_row = clients_df[clients_df.id == cid].iloc[0].to_dict()
                filled_prompt = template.format(**client_row)
                with st.spinner(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è {client_row['first_name']} {client_row['last_name']}..."):
                    resp = client.chat.completions.create(
                        model=model,
                        messages=[
                            {"role": "system", "content": "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –ø–∏—à—É—â–∏–π –ø—Ä–æ–¥–∞—é—â–∏–µ email-—Ä–∞—Å—Å—ã–ª–∫–∏."},
                            {"role": "user", "content": filled_prompt}
                        ],
                        temperature=temperature,
                        top_p=top_p,
                        max_tokens=max_tokens
                    )
                ans = resp.choices[0].message.content.strip()
                results.append(
                    f"---\n–ö–ª–∏–µ–Ω—Ç: {client_row['first_name']} {client_row['last_name']} (ID {cid})\n\n{ans}"
                )
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", value="\n\n".join(results), height=400)

if __name__ == "__main__":
    main()
