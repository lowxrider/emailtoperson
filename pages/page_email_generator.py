# pages/page_email_generator.py

import streamlit as st
from openai import OpenAI
from utils.db import fetch_customers, fetch_prompts
from config import DEFAULT_MODEL, DEFAULT_TEMPERATURE, DEFAULT_TOP_P, DEFAULT_MAX_TOKENS
import streamlit.components.v1 as components

def main():
    st.title("‚úâÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Email-—Ä–∞—Å—Å—ã–ª–æ–∫ (HTML-–ø—Ä–µ–≤—å—é)")

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞
    api_key = st.session_state.get("openai_api_key", "").strip()
    if not api_key:
        st.warning("–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
        return
    client = OpenAI(api_key=api_key)

    # 2) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    model       = st.session_state.get("model", DEFAULT_MODEL)
    temperature = st.session_state.get("temperature", DEFAULT_TEMPERATURE)
    top_p       = st.session_state.get("top_p", DEFAULT_TOP_P)
    max_tokens  = st.session_state.get("max_tokens", DEFAULT_MAX_TOKENS)

    # 3) –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î
    customers_df = fetch_customers()
    prompts_df   = fetch_prompts()

    # 4) –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
    client_map = {
        f"{row['first_name']} {row['last_name']} (ID {row['id']})": row["id"]
        for _, row in customers_df.iterrows()
    }
    selected = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", options=list(client_map.keys())
    )
    selected_ids = [client_map[k] for k in selected]

    # 5) –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞
    prompt_map = {row["description"]: row["prompt"] for _, row in prompts_df.iterrows()}
    chosen_desc = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (–ø—Ä–æ–º–ø—Ç)", options=list(prompt_map.keys()))
    template    = prompt_map[chosen_desc]

    # 6) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–ø–∏—Å—å–º–∞
    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ"):
        if not selected_ids:
            st.error("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        else:
            html_blocks = []
            for cid in selected_ids:
                client_row = customers_df[customers_df.id == cid].iloc[0].to_dict()
                filled_prompt = template.format(**client_row)

                with st.spinner(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∏—Å—å–º–æ –¥–ª—è {client_row['first_name']}..."):
                    resp = client.chat.completions.create(
                        model=model,
                        messages=[
                            {
                                "role": "system",
                                "content": (
                                    "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –ø–∏—Å–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞—é—â–∏—Ö –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö email-—Ä–∞—Å—Å—ã–ª–æ–∫."
                                )
                            },
                            {"role": "user", "content": filled_prompt}
                        ],
                        temperature=temperature,
                        top_p=top_p,
                        max_tokens=max_tokens,
                    )

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                answer = resp.choices[0].message.content.strip()
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –ø—Ä–æ—Å—Ç–æ–π HTML-–±–ª–æ–∫
                html = f"""
<div style="
    background: #ffffff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 24px;
    font-family: Arial, sans-serif;
">
  <h2 style="margin-top:0; color:#333;">
    –ü–∏—Å—å–º–æ –¥–ª—è {client_row['first_name']} {client_row['last_name']}
  </h2>
  <div style="white-space: pre-wrap; line-height:1.5; color:#444;">
    {answer}
  </div>
</div>
"""
                html_blocks.append(html)

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
            full_html = (
                "<div style='background:#f7f7f7; padding:20px;'>"
                + "".join(html_blocks) +
                "</div>"
            )
            components.html(full_html, height=700, scrolling=True)

if __name__ == "__main__":
    main()
