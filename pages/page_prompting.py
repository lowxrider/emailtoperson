# pages/page_prompting.py

import streamlit as st
import datetime
from openai import OpenAI
from utils.db import get_connection

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤."""
    conn = get_connection()
    conn.execute("""
        CREATE TABLE IF NOT EXISTS last_prompts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            prompt TEXT,
            response TEXT,
            timestamp TEXT
        );
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS library_prompts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT NOT NULL,
            prompt TEXT NOT NULL
        );
    """)
    conn.commit()
    return conn

def get_openai_client():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI."""
    api_key = st.session_state.get("openai_api_key", "")
    if not api_key:
        st.warning("–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
        return None
    return OpenAI(api_key=api_key)

def render_chat_history():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ session_state."""
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "system", "content": "–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email-—Ä–∞—Å—Å—ã–ª–æ–∫."}
        ]
    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])

def process_user_input(client, conn):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ LLM, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç."""
    user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶")
    if not user_input:
        return None, None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º
    st.session_state.messages.append({"role": "user", "content": user_input})
    st.chat_message("user").write(user_input)

    # –ó–∞–ø—Ä–æ—Å –∫ LLM
    model       = st.session_state.get("model", "gpt-3.5-turbo")
    temperature = st.session_state.get("temperature", 0.7)
    top_p       = st.session_state.get("top_p", 0.9)
    max_tokens  = st.session_state.get("max_tokens", 256)

    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
        resp = client.chat.completions.create(
            model=model,
            messages=st.session_state.messages,
            temperature=temperature,
            top_p=top_p,
            max_tokens=max_tokens
        )
    assistant_msg = resp.choices[0].message.content

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º
    st.session_state.messages.append({"role": "assistant", "content": assistant_msg})
    st.chat_message("assistant").write(assistant_msg)

    # –§–∏–∫—Å–∏—Ä—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
    conn.execute(
        "INSERT INTO last_prompts (prompt, response, timestamp) VALUES (?, ?, ?);",
        (user_input, assistant_msg, datetime.datetime.now().isoformat())
    )
    conn.commit()

    return user_input, assistant_msg

def save_prompt_to_library(conn, text: str, description: str = ""):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤."""
    conn.execute(
        "INSERT INTO library_prompts (description, prompt) VALUES (?, ?);",
        (description, text)
    )
    conn.commit()
    st.success("–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤")

def main():
    st.title("ü§ñ –ß–∞—Ç —Å LLM")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    conn = init_db()

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
    client = get_openai_client()
    if client is None:
        return

    # 3. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    render_chat_history()

    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_input, assistant_msg = process_user_input(client, conn)
    if user_input is None:
        return

    # 5. –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if st.button("‚ûï –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"):
        save_prompt_to_library(conn, user_input)

if __name__ == "__main__":
    main()
