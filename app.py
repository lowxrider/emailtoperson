import streamlit as st
from openai import OpenAI
from utils.db import get_connection

st.set_page_config(page_title="Email to Person App", layout="wide")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –≤ —Å–∞–π–¥–±–∞—Ä–µ ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM")

# API Key —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
st.session_state.setdefault("openai_api_key", "")
st.session_state.setdefault("api_saved", False)
api_key = st.sidebar.text_input(
    "OpenAI API Key",
    type="password",
    value=st.session_state.openai_api_key
)
col1, col2 = st.sidebar.columns(2)
if col1.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
    st.session_state.openai_api_key = api_key
    st.session_state.api_saved = True
if col2.button("–û—á–∏—Å—Ç–∏—Ç—å"):
    st.session_state.openai_api_key = ""
    st.session_state.api_saved = False

# –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–ª—è
if not st.session_state.openai_api_key:
    st.sidebar.markdown(
        """<style>
        div[data-testid="stTextInput"] input {
            border: 2px solid #f44336 !important;
            box-shadow: 0 0 5px rgba(244, 67, 54, .5);
        }
        </style>""",
        unsafe_allow_html=True
    )
elif st.session_state.api_saved:
    st.sidebar.markdown(
        """<style>
        div[data-testid="stTextInput"] input {
            border: 2px solid #4CAF50 !important;
            box-shadow: 0 0 5px rgba(76, 175, 80, .5);
        }
        </style>""",
        unsafe_allow_html=True
    )

# --- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ---
fallback_models = ["gpt-3.5-turbo", "text-davinci-003"]
available_models = fallback_models.copy()
models_disabled = True

if st.session_state.openai_api_key:
    try:
        client = OpenAI(api_key=st.session_state.openai_api_key)
        resp = client.models.list()
        available_models = [m.id for m in resp.data] or fallback_models
        models_disabled = False
    except Exception:
        # –æ—Å—Ç–∞–≤–ª—è–µ–º fallback –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ disabled
        available_models = fallback_models.copy()
        models_disabled = True

st.session_state.setdefault("model", available_models[0])
st.session_state.model = st.sidebar.selectbox(
    "–ú–æ–¥–µ–ª—å",
    available_models,
    index=available_models.index(st.session_state.model),
    disabled=models_disabled
)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ ---
for key, label, widget, opts in [
    ("temperature", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0‚Äì1)",      st.sidebar.slider,       {"min_value":0.0, "max_value":1.0, "step":0.01, "value":0.7}),
    ("top_p",       "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (top_p)",   st.sidebar.slider,       {"min_value":0.0, "max_value":1.0, "step":0.01, "value":0.3}),
    ("max_tokens",  "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",     st.sidebar.number_input, {"min_value":1,   "max_value":4096,  "step":1,   "value":256}),
]:
    st.session_state.setdefault(key, opts["value"])
    st.session_state[key] = widget(
        label,
        value=st.session_state[key],
        **{k:v for k,v in opts.items() if k!="value"}
    )

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
pages = [
    st.Page("pages/page_email_generator.py", title="‚úâÔ∏è Email Generator"),
    st.Page("pages/page_customers.py",       title="üë• –ö–ª–∏–µ–Ω—Ç—ã (CRM)"),
    st.Page("pages/page_library_prompts.py", title="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"),
    st.Page("pages/page_prompting.py",       title="ü§ñ –ü—Ä–æ–º–ø—Ç–∏–Ω–≥"),
]
st.navigation(pages=pages, position="sidebar", expanded=True).run()
