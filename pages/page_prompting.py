# pages/page_prompting.py

import streamlit as st
import datetime
from openai import OpenAI
from utils.db import get_connection

# –î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É
@st.dialog("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
def show_add_prompt_dialog(prompt_text: str):
    st.write("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É:")
    st.text_area("–ü—Ä–æ–º–ø—Ç (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)", value=prompt_text, disabled=True, height=150)
    desc = st.text_input("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", "")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO library_prompts (description, prompt) VALUES (?, ?);",
                (desc, prompt_text),
            )
            conn.commit()
            st.success("–ü—Ä–æ–º–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
            st.rerun()
    with col2:
        if st.button("–û—Ç–º–µ–Ω–∞"):
            st.rerun()

def main():
    st.title("ü§ñ –ß–∞—Ç —Å LLM")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API-–∫–ª—é—á –∑–∞–¥–∞–Ω
    api_key = st.session_state.get("openai_api_key", "")
    if not api_key:
        st.warning("–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
        return

    client = OpenAI(api_key=api_key)
    model       = st.session_state.get("model", "gpt-3.5-turbo")
    temperature = st.session_state.get("temperature", 0.7)
    top_p       = st.session_state.get("top_p", 0.9)
    max_tokens  = st.session_state.get("max_tokens", 256)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏—Å—Ç–æ—Ä–∏–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS last_prompts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            prompt TEXT,
            response TEXT,
            timestamp TEXT
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS library_prompts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT NOT NULL,
            prompt TEXT NOT NULL
        );
    """)
    conn.commit()

    # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "system", "content": "–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email-—Ä–∞—Å—Å—ã–ª–æ–∫."}
        ]

    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])

    user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    if not user_input:
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
    st.session_state.messages.append({"role": "user", "content": user_input})
    st.chat_message("user").write(user_input)

    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
        resp = client.chat.completions.create(
            model=model,
            messages=st.session_state.messages,
            temperature=temperature,
            top_p=top_p,
            max_tokens=max_tokens
        )
    assistant_msg = resp.choices[0].message.content
    st.session_state.messages.append({"role": "assistant", "content": assistant_msg})
    st.chat_message("assistant").write(assistant_msg)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    cursor.execute(
        "INSERT INTO last_prompts (prompt, response, timestamp) VALUES (?, ?, ?);",
        (user_input, assistant_msg, datetime.datetime.now().isoformat())
    )
    conn.commit()

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"):
        show_add_prompt_dialog(assistant_msg)

if __name__ == "__main__":
    main()
