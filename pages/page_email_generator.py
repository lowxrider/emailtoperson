# pages/page_email_generator.py

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI
from utils.db import fetch_customers, fetch_prompts
from config import DEFAULT_MODEL, DEFAULT_TEMPERATURE, DEFAULT_TOP_P, DEFAULT_MAX_TOKENS
from datetime import datetime, timedelta

def main():
    st.title("‚úâÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTML Email-—Ä–∞—Å—Å—ã–ª–æ–∫")

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞
    api_key = st.session_state.get("openai_api_key", "").strip()
    if not api_key:
        st.warning("–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
        return
    client = OpenAI(api_key=api_key)

    # 2) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    model       = st.session_state.get("model", DEFAULT_MODEL)
    temperature = st.session_state.get("temperature", DEFAULT_TEMPERATURE)
    top_p       = st.session_state.get("top_p", DEFAULT_TOP_P)
    max_tokens  = st.session_state.get("max_tokens", DEFAULT_MAX_TOKENS)

    # 3) –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î
    customers_df = fetch_customers()
    if customers_df.empty:
        st.info("–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    prompts_df = fetch_prompts()
    if prompts_df.empty:
        st.info("–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    # 4) –ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
    customer_map = {
        f"{r['first_name']} {r['last_name']} (ID {r['id']})": r['id']
        for _, r in customers_df.iterrows()
    }
    selected_clients = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        options=list(customer_map.keys())
    )
    selected_ids = [customer_map[name] for name in selected_clients]

    # 5) –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompt_map = {
        r['description']: r['prompt']
        for _, r in prompts_df.iterrows()
    }
    chosen_desc   = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞", list(prompt_map.keys()))
    prompt_template = prompt_map[chosen_desc]

    # 6) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ HTML-email
    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Email"):
        if not selected_ids:
            st.error("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        else:
            html_blocks = []
            for cid in selected_ids:
                client_row = customers_df[customers_df.id == cid].iloc[0].to_dict()

                # –≤—ã—á–∏—Å–ª—è–µ–º deadline ‚Äî —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                bd = datetime.fromisoformat(client_row['birth_date'])
                deadline = (bd + timedelta(days=7)).strftime("%d.%m.%Y")
                client_row['deadline'] = deadline

                # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ —à–∞–±–ª–æ–Ω
                filled_prompt = prompt_template.format(**client_row)

                with st.spinner(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∏—Å—å–º–æ –¥–ª—è {client_row['first_name']}..."):
                    resp = client.chat.completions.create(
                        model=model,
                        messages=[
                            {"role": "system", "content":
                                "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, —Å–æ–∑–¥–∞—é—â–∏–π HTML-email. "
                                "–í–µ—Ä–Ω–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–∏—Å—å–º–∞: —Ç–µ–º–∞ –≤ <h1>, "
                                "—Ç–µ–ª–æ –≤ <div> —Å inline-CSS, –±–µ–∑ <html>/<body>."},
                            {"role": "user", "content": filled_prompt}
                        ],
                        temperature=temperature,
                        top_p=top_p,
                        max_tokens=max_tokens,
                    )
                html_content = resp.choices[0].message.content.strip()
                html_blocks.append(f"<section style='margin-bottom:24px'>{html_content}</section>")

            # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_html = "<div style='background:#f9f9f9;padding:16px;border-radius:8px'>" + "".join(html_blocks) + "</div>"
            components.html(final_html, height=600, scrolling=True)

if __name__ == "__main__":
    main()
