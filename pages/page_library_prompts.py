# pages/page_library_prompts.py

import streamlit as st
import sqlite3
import pandas as pd
from utils.db import get_connection
from utils.generator import generate_prompts

def init_prompts_table(conn: sqlite3.Connection):
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É library_prompts, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn.execute("""
        CREATE TABLE IF NOT EXISTS library_prompts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT NOT NULL,
            prompt TEXT NOT NULL
        );
    """)
    conn.commit()

def populate_initial_prompts(conn: sqlite3.Connection):
    """
    –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ—ë –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ generate_prompts().
    """
    cur = conn.cursor()
    cur.execute("SELECT COUNT(1) FROM library_prompts;")
    if cur.fetchone()[0] == 0:
        records = generate_prompts()  # [(description, prompt), ...]
        cur.executemany(
            "INSERT INTO library_prompts (description, prompt) VALUES (?, ?);",
            records
        )
        conn.commit()

def fetch_prompts(conn: sqlite3.Connection) -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –ë–î."""
    return pd.read_sql_query(
        "SELECT id, description, prompt FROM library_prompts ORDER BY id;",
        conn
    )

def update_prompt(conn: sqlite3.Connection, prompt_id: int, desc: str, text: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –ø—Ä–æ–º–ø—Ç–∞ –≤ –ë–î."""
    conn.execute(
        "UPDATE library_prompts SET description = ?, prompt = ? WHERE id = ?;",
        (desc, text, prompt_id)
    )
    conn.commit()

def delete_prompt(conn: sqlite3.Connection, prompt_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î."""
    conn.execute(
        "DELETE FROM library_prompts WHERE id = ?;",
        (prompt_id,)
    )
    conn.commit()

def main():
    st.title("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤")

    # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    conn = get_connection()
    init_prompts_table(conn)
    populate_initial_prompts(conn)

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = fetch_prompts(conn)
    st.session_state["library_prompts_df"] = df  # –¥–µ–ª–∞—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–æ –≤—Å—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

    # 3. –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    if df.empty:
        st.info("–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    # 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª—è—Ç—å
    for row in df.itertuples(index=False):
        with st.expander(f"#{row.id}: {row.description}", expanded=False):
            # –ò–Ω–ø—É—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            new_desc = st.text_input(
                "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                value=row.description,
                key=f"desc_{row.id}"
            )
            new_text = st.text_area(
                "–¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞",
                value=row.prompt,
                key=f"text_{row.id}",
                height=120
            )
            # –ö–Ω–æ–ø–∫–∏
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{row.id}"):
                    update_prompt(conn, row.id, new_desc, new_text)
                    st.success(f"–ü—Ä–æ–º–ø—Ç #{row.id} –æ–±–Ω–æ–≤–ª—ë–Ω")
                    st.rerun()
            with col2:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"del_{row.id}"):
                    delete_prompt(conn, row.id)
                    st.success(f"–ü—Ä–æ–º–ø—Ç #{row.id} —É–¥–∞–ª—ë–Ω")
                    st.rerun()

if __name__ == "__main__":
    main()
