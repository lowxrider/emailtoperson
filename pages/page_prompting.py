# pages/page_prompting.py

import streamlit as st
from openai import OpenAI

def get_openai_client():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ OpenAI, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω API-–∫–ª—é—á."""
    api_key = st.session_state.get("openai_api_key", "").strip()
    if not api_key:
        st.warning("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
        return None
    try:
        return OpenAI(api_key=api_key)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI: {e}")
        return None

def main():
    st.title("üí¨ –ß–∞—Ç –¥–ª—è –æ–ø—ã—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = get_openai_client()
    if client is None:
        return

    # 2. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞
    model       = st.session_state.get("model",      "gpt-3.5-turbo")
    temperature = st.session_state.get("temperature", 0.7)
    top_p       = st.session_state.get("top_p",       0.9)
    max_tokens  = st.session_state.get("max_tokens",  256)

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = [
            {
                "role": "system",
                "content": (
                    "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è "
                    "–ø—Ä–æ–¥–∞—é—â–∏—Ö –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–µ–∫—Å—Ç–æ–≤. "
                    "–ü–æ–º–æ–≥–∞–π—Ç–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–ø–∏—Å–∞–Ω–∏—è "
                    "—Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                )
            }
        ]

    # 4. –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for msg in st.session_state.chat_history:
        st.chat_message(msg["role"]).write(msg["content"])

    # 5. –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter‚Ä¶")
    if user_input:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        st.chat_message("user").write(user_input)

        # 6. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É –º–æ–¥–µ–ª–∏
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
            resp = client.chat.completions.create(
                model=model,
                messages=st.session_state.chat_history,
                temperature=temperature,
                top_p=top_p,
                max_tokens=max_tokens
            )
        assistant_msg = resp.choices[0].message.content

        # 7. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        st.session_state.chat_history.append({"role": "assistant", "content": assistant_msg})
        st.chat_message("assistant").write(assistant_msg)

if __name__ == "__main__":
    main()
