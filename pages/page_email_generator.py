# pages/page_email_generator.py

import streamlit as st
import streamlit.components.v1 as components
from openai import OpenAI
from utils.db import fetch_customers, fetch_prompts
from config import DEFAULT_MODEL, DEFAULT_TEMPERATURE, DEFAULT_TOP_P, DEFAULT_MAX_TOKENS
from datetime import datetime, timedelta
import re
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def send_email(to_email: str, subject: str, html_body: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-–ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ SMTP.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã SMTP –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ st.secrets['smtp']:
    server, port, user, password, from_email.
    """
    smtp_conf = st.secrets["smtp"]
    msg = MIMEMultipart("alternative")
    msg["Subject"] = subject
    msg["From"] = smtp_conf["from_email"]
    msg["To"]   = to_email
    part = MIMEText(html_body, "html")
    msg.attach(part)
    with smtplib.SMTP_SSL(smtp_conf["server"], smtp_conf["port"]) as server:
        server.login(smtp_conf["user"], smtp_conf["password"])
        server.sendmail(smtp_conf["from_email"], to_email, msg.as_string())

def main():
    st.title("‚úâÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ HTML Email")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞
    api_key = st.session_state.get("openai_api_key", "").strip()
    if not api_key:
        st.warning("–£–∫–∞–∂–∏—Ç–µ OpenAI API Key –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö LLM")
        return
    client = OpenAI(api_key=api_key)

    # 2. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    model       = st.session_state.get("model", DEFAULT_MODEL)
    temperature = st.session_state.get("temperature", DEFAULT_TEMPERATURE)
    top_p       = st.session_state.get("top_p", DEFAULT_TOP_P)
    max_tokens  = st.session_state.get("max_tokens", DEFAULT_MAX_TOKENS)

    # 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    customers_df = fetch_customers()
    prompts_df   = fetch_prompts()
    if customers_df.empty:
        st.info("–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
        return
    if prompts_df.empty:
        st.info("–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    # 4. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞
    customer_map = {
        f"{r['first_name']} {r['last_name']} (ID {r['id']})": r['id']
        for _, r in customers_df.iterrows()
    }
    selected_clients = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", list(customer_map.keys())
    )
    selected_ids = [customer_map[name] for name in selected_clients]

    prompt_map = {
        r['description']: r['prompt']
        for _, r in prompts_df.iterrows()
    }
    chosen_desc     = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞", list(prompt_map.keys()))
    prompt_template = prompt_map[chosen_desc]

    # 5. –û–ø—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É
    send_via_email = st.checkbox("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞ –Ω–∞ email –∫–ª–∏–µ–Ω—Ç–æ–≤")

    # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ—Ç–ø—Ä–∞–≤–∫–∞
    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Email"):
        if not selected_ids:
            st.error("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        else:
            html_output = ""
            for cid in selected_ids:
                client_row = customers_df[customers_df.id == cid].iloc[0].to_dict()

                # –í—ã—á–∏—Å–ª—è–µ–º deadline
                bd = datetime.fromisoformat(client_row['birth_date'])
                client_row['deadline'] = (bd + timedelta(days=7)).strftime("%d.%m")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
                filled_prompt = prompt_template.format(**client_row)

                with st.spinner(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–∏—Å—å–º–æ –¥–ª—è {client_row['first_name']}..."):
                    resp = client.chat.completions.create(
                        model=model,
                        messages=[
                            {"role": "system", "content":
                                "–í—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –∏ email-–¥–∏–∑–∞–π–Ω–µ—Ä. –í–µ—Ä–Ω–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–∏—Å—å–º–∞: "
                                "—Ç–µ–º–∞ –≤ <h1>, —Ç–µ–ª–æ –≤ <div> —Å inline-CSS, –±–µ–∑ <html>/<body>."},
                            {"role": "user", "content": filled_prompt}
                        ],
                        temperature=temperature,
                        top_p=top_p,
                        max_tokens=max_tokens,
                    )
                html_block = resp.choices[0].message.content.strip()

                # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –≤—ã–≤–æ–¥
                html_output += f"<section style='margin-bottom:24px'>{html_block}</section>"

                # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
                if send_via_email:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º subject –∏–∑ <h1>
                    m = re.search(r"<h1.*?>(.*?)</h1>", html_block, re.IGNORECASE|re.DOTALL)
                    subject = m.group(1).strip() if m else f"Email –¥–ª—è {client_row['first_name']}"
                    # –û—Ç–ø—Ä–∞–≤–∫–∞
                    try:
                        send_email(client_row['email'], subject, html_block)
                        st.success(f"–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {client_row['email']}")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {client_row['email']}: {e}")

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∫–Ω–µ HTML-–ø—Ä–µ–≤—å—é
            final_html = (
                "<div style='background:#f9f9f9;padding:16px;border-radius:8px;max-width:800px;'>"
                + html_output +
                "</div>"
            )
            components.html(final_html, height=700, scrolling=True)

if __name__ == "__main__":
    main()
